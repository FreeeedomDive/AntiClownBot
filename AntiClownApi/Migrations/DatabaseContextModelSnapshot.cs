// <auto-generated />
using System;
using AntiClownBotApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AntiClownBotApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbEmote", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Emotes");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbItemStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CatAutoTributeChance")
                        .HasColumnType("integer");

                    b.Property<int>("CommunismDivideChance")
                        .HasColumnType("integer");

                    b.Property<int>("CommunismStealChance")
                        .HasColumnType("integer");

                    b.Property<int>("DogLootBoxFindChance")
                        .HasColumnType("integer");

                    b.Property<int>("InternetGigabytes")
                        .HasColumnType("integer");

                    b.Property<int>("InternetPing")
                        .HasColumnType("integer");

                    b.Property<int>("InternetSpeed")
                        .HasColumnType("integer");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("JadeRodLength")
                        .HasColumnType("integer");

                    b.Property<int>("JadeRodThickness")
                        .HasColumnType("integer");

                    b.Property<int>("RiceNegativeRangeExtend")
                        .HasColumnType("integer");

                    b.Property<int>("RicePositiveRangeExtend")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("ItemStats");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbShopItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOwned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevealed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbUserShop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FreeItemReveals")
                        .HasColumnType("integer");

                    b.Property<int>("ReRollPrice")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserShops");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("RatingChange")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserEconomyId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserEconomyId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUser", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("DiscordId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserEconomy", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("LootBoxes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("NextTribute")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ScamCoins")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserEconomies");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserEmotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<decimal>("EmoteId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("StatsId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("StatsId");

                    b.ToTable("UserEmotes");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserStats", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("JoinedPartyCount")
                        .HasColumnType("integer");

                    b.Property<int>("TributeCount")
                        .HasColumnType("integer");

                    b.Property<int>("WrittenMessagesCount")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbItem", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbUser", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbItemStats", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbItems.DbItem", "Item")
                        .WithOne("ItemStats")
                        .HasForeignKey("AntiClownBotApi.Database.DBModels.DbItems.DbItemStats", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbShopItem", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbItems.DbUserShop", "Shop")
                        .WithMany("Items")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbUserShop", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbUser", "User")
                        .WithOne("Shop")
                        .HasForeignKey("AntiClownBotApi.Database.DBModels.DbItems.DbUserShop", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbTransaction", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbUserEconomy", "UserEconomy")
                        .WithMany("Transactions")
                        .HasForeignKey("UserEconomyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserEconomy");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserEconomy", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbUser", "User")
                        .WithOne("Economy")
                        .HasForeignKey("AntiClownBotApi.Database.DBModels.DbUserEconomy", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserEmotes", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbEmote", "Emote")
                        .WithMany("EmoteStats")
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntiClownBotApi.Database.DBModels.DbUserStats", "UserStats")
                        .WithMany("UsedEmotes")
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emote");

                    b.Navigation("UserStats");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserStats", b =>
                {
                    b.HasOne("AntiClownBotApi.Database.DBModels.DbUser", "User")
                        .WithOne("Stats")
                        .HasForeignKey("AntiClownBotApi.Database.DBModels.DbUserStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbEmote", b =>
                {
                    b.Navigation("EmoteStats");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbItem", b =>
                {
                    b.Navigation("ItemStats");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbItems.DbUserShop", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUser", b =>
                {
                    b.Navigation("Economy");

                    b.Navigation("Items");

                    b.Navigation("Shop");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserEconomy", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AntiClownBotApi.Database.DBModels.DbUserStats", b =>
                {
                    b.Navigation("UsedEmotes");
                });
#pragma warning restore 612, 618
        }
    }
}
